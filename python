Python очевидно не типизированный ЯП, который позволяет нам писать сжатые программы за счет своей не многосложности. Является высокоуровневым ЯП. Проверка типов происходит in runtime instead of compile time, что добавляет свои плюсы в скорости написания и минусы в скорости работы. Большое внимание уделяется Readability. Является interpreted и multi-paradigm (OO and Structure). 
Можно переопределять операторы.

Плюсы Питона:
 1) Extensible Design - Много функциональности может быть добавлено on top of core Python.
 2) Community Evolved Design - Через PEP.
 3) Emphasizing FUN
 4) Culture

Pip - это пакетный менеджер, которы позволяет нам загружать и удалять пакеты.
PEP[Python Enhancement Proposals] - предложенные нововведения в Python.
PyPI - python package index - репозиторий с которого pip берет python пакеты.

Python 3 не совместим с Python 2. Так что при внедрении новых фич, они не должны были оглядываться на версию 2. 
Главные различия:
 1) Print is a function :: Print is A function 
 2) When two integers divided, will get float value if required :: When two integers divided, always get only integer value
 3) Storing string as UTF-8 :: Need to specify "u".
 4) Syntax becomes more simpler and easily understandable :: Syntax was quite difficult to python3.
 5) Rules of ordering comparisons has been simplified :: It's more complexed to python3.
 6) Range() introducers for iterations :: Xrange() is used for iterations
 7) The value of variables does't leak :: The value of global variable got changed while using that in for - loop.
 8) Exception argument should be enclosed in parenthesis :: Exception argument can be enclosed in notation.

Выполнять python код можно 3-я способами:
 1) Interpreter - выполнить код который записан в py файл.
 2) REPL.
 3) Natively - когда запускаем python программы не заботясь о версии Python и о нем вообще, производится с помощью: py2exe, pyinstaller and etc.

Стандартные библиотеки у Python насыщенные, позволяют решать real world задачи прямо из коробки.

Types in Python:
 Нет таких как longs and double. Динамическая типизация позволяет ускорить разработку. Но с другой стороны это ведет к большому количеству багов. Так как если будут несопоставимые типы, то программа упадет во время выполнения, а не компиляции как в ЯП со строгой типизацией. 
 Types Hinting - позволяет добавить тип к переменным в python def add(a:int, b:int) -> int : return a + b;
 1) Integers - num = 42. Имеет не ограниченный размер.
 2) Floats - float = 3.14159. Можно создавать по типу 1.655е-35 или inf. 
 3) String - a = "text". Представляет текст в Unicode. Объявление строк с 3-я кавычками позволяет использовать эту строку как комментарий. Объявленные рядом строчки конкатенируются. С ним можно обращаться как с листом.
 4) Boolean - bool = True/False. Их можно конвертировать в int и получить 1/2 соответсвенно. 
 5) None - nn = None. То же что и null в других языках. В if преобразуется в False.
 6) List - students = [...]. Взять элементы можно по индексу students[0]. Для того чтобы взять последний элемент, можно написать students[-1], где индексы считаются в обратном порядке: самый последний = -1, предыдущий = -2 и тд. Для замены элемента в list, нужно всего лишь: students[0] = "smth". Для добавления использовать функцию append() [добавляет в конец]. Для проверки элемента в list, нужно написать "smth" in students. len(student) - возвращает размер листа. Пайтон позволяет нам добавлять в лист сколько угодно значений каких угодно разных типов. Для удаления элементов из списка del students[0]. Slicing - позволяет игнорировать какое-то количество элементов в списке students[1:] - выводит все элементы начиная с первого, или можно использовать в таком виде students[1:-1] - выводит все кроме первого и последнего.
 7) Dictionaries - аналог JSON. Для получения элемента можно действовать таким образом student['name'], если взять ключ которого нет, то выпадет ошибка, чтобы ее избежать, можно использовать student.get('last_name', 'Unknown'). student.keys() - получить все ключи. student.values() - получить все значения. Менять и удалять значения так же как и в list.
 9) complex.
 10) bytes and bytearray. - очень похожи на str, где у нас строка представляет набор байтов а не символов Юникода.
 11) tuples 
 12) set and frozen set
!!! В Python нету char !!!

If bool:
    print("true")
else:
    print("false") - if statement.
Есть концепт так называемых Truthy value:
 1) Integer превращается в true если он != 0.
 2) String превращается в true если он != "".
Так же есть версия с if not ... . Можно использовать and or or, являющимися эквивалентами к && and || соотвественно.
Тернарная операция: "bigger" if a > b else "smaller".

For student in students:
    ptint(student) - истерирует по студентам и что-то с ними делает, похож на for-each в java. Это работает только с интерируемыми объектами.
Функция range() принимает число и конвертирует его в список от нуля до числа. Можно использовать как for по числу, как в других ЯП. Но так же Сожно передать два числа, чтобы специфицировать то, с какого и до какого числа нам нужен лист. И еще есть версия с 3-я аргументами, которые позволяет нам указать на какое число нужно инкрементить. Можно использовать такие statement как brake and continue.

x=0
While x < 10:
    print(x)
    x += 1 - while цикл, такое же как и во всех других языках.

Exceptions:
Они детскую так же как и во всех ЯП и их так же можно перехватывать.
try:
    student["last_name"]
except KeyError as error:
    print("Error was raised")
    print(error)

Functions:
Функции объявляются по всем правилам Python кода и действуют так же как и во всех ЯП. Кроме того нам разрешено делать аргументы optional. Поддерживается именовать передаваемы аргументы при вызове функции. Для того чтобы функция могла принимать произвольное количество элементов, в сигнатуре надо определить переменную с именем *args, которая будет являться листом. Для того чтобы произвольное количество аргументов могли передаваться в виде именованных аргументов, их надо принимать в сигнатуре функции в виде **kwargs, где kwargs является dictionary и образуется к аргументам по ключу. Функции могут быть nested и nested функции имеют доступ к переменным функции родителя.

Yield - позволяет нам писать свой итератор в виде функции. Вся суть в том, что это слово возвращает генератор, а не итератор, а разница в том что первый из них позволяет пройтись по коллекции только 1 раз (после каждой итерации забывает про прошедшее значение), а второй сколько угодно раз (хранит все значения в памяти). По факту вызываемая функция не выполняется, а просто возвращает генератор. Код вызывается каждый раз когда выполняется итерация в for, и поскольку код натыкается на слово yield. Генератор считается пустым покуда он не натыкается на yield или не сработает какой-то if statement.

Lambda functions - это безымянные функции, которые могут принимать аргумент. double = lambda x: x * a. Применяется в hifgh-order functions.

Class:
 Все так же как и в других ЯП, объявляется по правилам Python. Для создания объекта класса нужно написать Clazz(). Ключевое слово self, в параметрах метода подразумевает ссылку на инстанс класса и должен быть первым параметром. Для того чтобы создать конструктор, мы должны создать метод __init__, где первым параметром обязательно должен быть self. def __str__ - аналог toString in Java. Для того чтобы определить instance attributes, нужно в конструкторе написать self.var = ..., это создан нам поле. Можно создавать class attributes путем объявления переменной на уровне класса, которые будут считаться как статические переменные. Присутствует так же наследование, которое выражается тем, что в скобки объявления класса передаётся название класса родителя, и работает наследник так же как и везде. Для того чтобы обратиться к методам и переменным родителя, достаточно будет написать self(). Так как нет ключевых слов обозначающих области видимости, решено было обозначать методы, которые не подлежат использованию или переопределнию с ключевого нижнего подчеркивания. Так же нет интерфейсов. 

Import - можно импортировать все что угодно, от классов до переменных. Импортируется файл.

pass - ключевое слово которое говорит компилятору не делать ничего.

Virtual Environment - это возможность создавать виртуальные среды python, где можно использовать версию питона или пакеты которые нужны тебе.

/ - возвращвет float.
// - возвращает int.

Все специальные атрибуты в Python начинаются с __.
__name__ - возвращает название модуля если был импортирован (выполняется единожды при первом импорте), или выводит __main__, если был вызван как script.

Функции это не только какое-то объявление, это statement, который обозначает привязку какого-то кода к имени функции. Дефолтные аргументы должны идти сразу после обязательных аргументов. Дефолтные аргументы вызываются только тогда, когда вызывается def, дальше возвращается только их вычисленное значение.

whole shebang - строчка сверху которая характеризует то, какая версия python должна использоваться при запуске.

== (Value) - сравнивает значение двух объектов, в то время как is (Identity) - сравнивает ссылки двух объектов.













